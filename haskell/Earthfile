VERSION 0.8

INIT:
  FUNCTION
  RUN if [ -n "$EARTHLY_CACHE_PREFIX" ]; then \
    echo "+INIT has already been called in this build environment" ; \
    exit 1; \
  fi

  # $EARTHLY_CACHE_PREFIX
  ARG EARTHLY_TARGET_PROJECT_NO_TAG #https://docs.earthly.dev/docs/earthfile/builtin-args
  ARG OS_RELEASE=$(md5sum /etc/os-release | cut -d ' ' -f 1)
  ARG cache_prefix="${EARTHLY_TARGET_PROJECT_NO_TAG}#${OS_RELEASE}#earthly-cabal-cache"
  ENV EARTHLY_CACHE_PREFIX=$cache_prefix

  ENV CABAL_DIR="/tmp/earthly/.cabal"

CABAL:
  FUNCTION
  DO +CHECK_INITED
  ARG --required args
  ARG target
  ARG output_bin=$target
  ARG output="output"
  DO +SET_CACHE_MOUNTS_ENV
  RUN --mount=$EARTHLY_HASKELL_CABAL_DIR_CACHE --mount=$EARTHLY_HASKELL_DIST_CACHE \
    set -e; \
    eval cabal "${args}";
  IF [ -n "${target}" ]
    DO +COPY_OUTPUT --target=$target --output_bin=$output_bin --output=$output
  END

SET_CACHE_MOUNTS_ENV:
  FUNCTION
  DO +CHECK_INITED
  ARG EARTHLY_TARGET_NAME #https://docs.earthly.dev/docs/earthfile/builtin-args
  ENV EARTHLY_HASKELL_CABAL_DIR_CACHE="type=cache,mode=0777,id=${EARTHLY_CACHE_PREFIX}#cabal-dir,sharing=shared,target=${CABAL_DIR}"
  ENV EARTHLY_HASKELL_DIST_CACHE="type=cache,mode=0777,id=${EARTHLY_CACHE_PREFIX}#target#master#${EARTHLY_TARGET_NAME},id=${EARTHLY_CACHE_PREFIX}#target#${EARTHLY_GIT_BRANCH}#${EARTHLY_TARGET_NAME},sharing=locked,target=dist-newstyle"

COPY_OUTPUT:
  FUNCTION
  ARG --required target
  ARG --required output_bin
  ARG --required output
  ARG TMP_FOLDER="/tmp/earthly/lib/haskell"
  RUN  if [ ! -n "$EARTHLY_HASKELL_DIST_CACHE" ]; then \
    echo "+SET_CACHE_MOUNTS_ENV has not been called yet in this build environment" ; \
    exit 1; \
  fi;
  RUN --mount=$EARTHLY_HASKELL_DIST_CACHE \
      --mount=$EARTHLY_HASKELL_CABAL_DIR_CACHE \
      if [ -n "$target" ]; then  \
          echo "Copying output files" ;  \
          mkdir -p "${TMP_FOLDER}";  \
          for bin_name in $output_bin; do \
            for file in $(cabal list-bin $bin_name); do \
              cp $file $TMP_FOLDER; \
            done; \
          done; \
      fi;
  RUN mkdir -p "${output}"; \
      mv "${TMP_FOLDER}"/* "${output}" 2>/dev/null || echo "no files found within ./${output} matching the provided output regexp" ;

CHECK_INITED:
  FUNCTION
  RUN  if [ ! -n "${EARTHLY_CACHE_PREFIX}" ]; then \
        echo "+INIT has not been called yet in this build environment" ; \
        exit 1; \
      fi;

FREEZE_WITH_STACKAGE:
  FUNCTION
  ARG LTS_VERSION
  IF [ ! -f "cabal.project.freeze" ]
    IF [ -n "${LTS_VERSION}"]
      RUN curl "https://www.stackage.org/lts-${LTS_VERSION}/cabal.config" -o cabal.project.freeze
    END
  END

GENERATE_CABAL_FILES:
  FUNCTION
  RUN find . -type f -name package.yaml -exec hpack {} \;

BUILD:
  FUNCTION
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --disable-optimization --enable-tests --enable-benchmarks --ghc-options=\"-Wall -Werror\" ${extra_args}"
  ARG target
  ARG bin_target="${target}"
  ARG output_bin="${target}"
  ARG output="output/build"
  DO +CABAL --args="build ${target}" --target=$bin_target --output_bin=$bin_output --output=$output

TEST:
  FUNCTION
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --disable-optimization --enable-tests --enable-benchmarks --ghc-options=\"-Wall -Werror\" ${extra_args}"
  ARG target
  DO +CABAL --args="test ${target}"

BENCH:
  FUNCTION
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --enable-optimization=2 --enable-benchmarks --ghc-options=\"-Wall -Werror\" ${extra_args}"
  ARG target
  DO +CABAL --args="bench ${target}"

PRODUCTION_BUILD:
  FUNCTION
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --enable-optimization=2 ${extra_args}"
  ARG target
  ARG bin_target="${target}"
  ARG output_bin="${target}"
  ARG output="output/production"
  DO +CABAL --args="build ${target}" --target=$bin_target --output_bin=$output_bin --output=$output

PRODUCTION_BUILD_LLVM:
  FUNCTION
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --enable-optimization=2 --ghc-options=\"-fllvm -pgmlo "${GHC_LLVM_OPT_PATH}" -pgmlc "${GHC_LLVM_LLC_PATH}" -optlo-O3 -mavx2\" ${extra_args}"
  ARG target
  ARG bin_target="${target}"
  ARG output_bin="${target}"
  ARG output="output/production-llvm"
  DO +CABAL --args="build ${target}" --target=$bin_target --output_bin=$output_bin --output=$output

PRODUCTION_BUILD_STATIC:
  FUNCTION
  # Generate *.cabal files from package.yaml
  DO +GENERATE_CABAL_FILES
  ARG extra_args
  DO +CABAL --args="v2-configure --enable-optimization=2 --enable-static --enable-executable-static ${extra_args}"
  ARG target
  ARG bin_target="${target}"
  ARG output_bin="${target}"
  ARG output="output/production-static"
  DO +CABAL --args="build ${target}" --target=$bin_target --output_bin=$output_bin --output=$output
